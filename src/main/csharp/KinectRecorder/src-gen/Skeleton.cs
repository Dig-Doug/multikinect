// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skeleton.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from skeleton.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class SkeletonReflection {

  #region Descriptor
  /// <summary>File descriptor for skeleton.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SkeletonReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5za2VsZXRvbi5wcm90byIzCgVGcmFtZRIMCgR0aW1lGAEgASgDEhwKCXNr",
          "ZWxldG9ucxgCIAMoCzIJLlNrZWxldG9uIvkCCghTa2VsZXRvbhIKCgJpZBgB",
          "IAEoBBIWCgZqb2ludHMYAiADKAsyBi5Kb2ludBIsCg9oYW5kX2xlZnRfc3Rh",
          "dGUYAyABKA4yEy5Ta2VsZXRvbi5IYW5kU3RhdGUSOgoUaGFuZF9sZWZ0X2Nv",
          "bmZpZGVuY2UYBCABKA4yHC5Ta2VsZXRvbi5UcmFja2luZ0NvbmZpZGVuY2US",
          "LQoQaGFuZF9yaWdodF9zdGF0ZRgFIAEoDjITLlNrZWxldG9uLkhhbmRTdGF0",
          "ZRI7ChVoYW5kX3JpZ2h0X2NvbmZpZGVuY2UYBiABKA4yHC5Ta2VsZXRvbi5U",
          "cmFja2luZ0NvbmZpZGVuY2UiSgoJSGFuZFN0YXRlEgsKB1VOS05PV04QABIP",
          "CgtOT1RfVFJBQ0tFRBABEggKBE9QRU4QAhIKCgZDTE9TRUQQAxIJCgVMQVNT",
          "TxAEIicKElRyYWNraW5nQ29uZmlkZW5jZRIHCgNMT1cQABIICgRISUdIEAEi",
          "9QQKBUpvaW50Eh4KBHR5cGUYASABKA4yEC5Kb2ludC5Kb2ludFR5cGUSIQoL",
          "b3JpZW50YXRpb24YAiABKAsyDC5PcmllbnRhdGlvbhIbCghwb3NpdGlvbhgD",
          "IAEoCzIJLlBvc2l0aW9uEiwKDnRyYWNraW5nX3N0YXRlGAQgASgOMhQuSm9p",
          "bnQuVHJhY2tpbmdTdGF0ZSKgAwoJSm9pbnRUeXBlEg4KClNQSU5FX0JBU0UQ",
          "ABINCglTUElORV9NSUQQARIJCgVORUNLXxACEgkKBUhFQURfEAMSEQoNU0hP",
          "VUxERVJfTEVGVBAEEg4KCkVMQk9XX0xFRlQQBRIOCgpXUklTVF9MRUZUEAYS",
          "DQoJSEFORF9MRUZUEAcSEgoOU0hPVUxERVJfUklHSFQQCBIPCgtFTEJPV19S",
          "SUdIVBAJEg8KC1dSSVNUX1JJR0hUEAoSDgoKSEFORF9SSUdIVBALEgwKCEhJ",
          "UF9MRUZUEAwSDQoJS05FRV9MRUZUEA0SDgoKQU5LTEVfTEVGVBAOEg0KCUZP",
          "T1RfTEVGVBAPEg0KCUhJUF9SSUdIVBAQEg4KCktORUVfUklHSFQQERIPCgtB",
          "TktMRV9SSUdIVBASEg4KCkZPT1RfUklHSFQQExISCg5TUElORV9TSE9VTERF",
          "UhAUEhEKDUhBTkRfVElQX0xFRlQQFRIOCgpUSFVNQl9MRUZUEBYSEgoOSEFO",
          "RF9USVBfUklHSFQQFxIPCgtUSFVNQl9SSUdIVBAYIjsKDVRyYWNraW5nU3Rh",
          "dGUSDwoLTk9UX1RSQUNLRUQQABIMCghJTkZFUlJFRBABEgsKB1RSQUNLRUQQ",
          "AiI5CgtPcmllbnRhdGlvbhIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgD",
          "IAEoAhIJCgF3GAQgASgCIisKCFBvc2l0aW9uEgkKAXgYASABKAISCQoBeRgC",
          "IAEoAhIJCgF6GAMgASgCYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Frame), global::Frame.Parser, new[]{ "Time", "Skeletons" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Skeleton), global::Skeleton.Parser, new[]{ "Id", "Joints", "HandLeftState", "HandLeftConfidence", "HandRightState", "HandRightConfidence" }, null, new[]{ typeof(global::Skeleton.Types.HandState), typeof(global::Skeleton.Types.TrackingConfidence) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Joint), global::Joint.Parser, new[]{ "Type", "Orientation", "Position", "TrackingState" }, null, new[]{ typeof(global::Joint.Types.JointType), typeof(global::Joint.Types.TrackingState) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Orientation), global::Orientation.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Position), global::Position.Parser, new[]{ "X", "Y", "Z" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Frame : pb::IMessage<Frame> {
  private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
  public static pb::MessageParser<Frame> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::SkeletonReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Frame() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Frame(Frame other) : this() {
    time_ = other.time_;
    skeletons_ = other.skeletons_.Clone();
  }

  public Frame Clone() {
    return new Frame(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  ///  BodyFrame.RelativeTime
  /// </summary>
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "skeletons" field.</summary>
  public const int SkeletonsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Skeleton> _repeated_skeletons_codec
      = pb::FieldCodec.ForMessage(18, global::Skeleton.Parser);
  private readonly pbc::RepeatedField<global::Skeleton> skeletons_ = new pbc::RepeatedField<global::Skeleton>();
  public pbc::RepeatedField<global::Skeleton> Skeletons {
    get { return skeletons_; }
  }

  public override bool Equals(object other) {
    return Equals(other as Frame);
  }

  public bool Equals(Frame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if(!skeletons_.Equals(other.skeletons_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    hash ^= skeletons_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    skeletons_.WriteTo(output, _repeated_skeletons_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    size += skeletons_.CalculateSize(_repeated_skeletons_codec);
    return size;
  }

  public void MergeFrom(Frame other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    skeletons_.Add(other.skeletons_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 18: {
          skeletons_.AddEntriesFrom(input, _repeated_skeletons_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Skeleton : pb::IMessage<Skeleton> {
  private static readonly pb::MessageParser<Skeleton> _parser = new pb::MessageParser<Skeleton>(() => new Skeleton());
  public static pb::MessageParser<Skeleton> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::SkeletonReflection.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Skeleton() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Skeleton(Skeleton other) : this() {
    id_ = other.id_;
    joints_ = other.joints_.Clone();
    handLeftState_ = other.handLeftState_;
    handLeftConfidence_ = other.handLeftConfidence_;
    handRightState_ = other.handRightState_;
    handRightConfidence_ = other.handRightConfidence_;
  }

  public Skeleton Clone() {
    return new Skeleton(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private ulong id_;
  /// <summary>
  ///  Body.TrackingId
  /// </summary>
  public ulong Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "joints" field.</summary>
  public const int JointsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Joint> _repeated_joints_codec
      = pb::FieldCodec.ForMessage(18, global::Joint.Parser);
  private readonly pbc::RepeatedField<global::Joint> joints_ = new pbc::RepeatedField<global::Joint>();
  public pbc::RepeatedField<global::Joint> Joints {
    get { return joints_; }
  }

  /// <summary>Field number for the "hand_left_state" field.</summary>
  public const int HandLeftStateFieldNumber = 3;
  private global::Skeleton.Types.HandState handLeftState_ = 0;
  public global::Skeleton.Types.HandState HandLeftState {
    get { return handLeftState_; }
    set {
      handLeftState_ = value;
    }
  }

  /// <summary>Field number for the "hand_left_confidence" field.</summary>
  public const int HandLeftConfidenceFieldNumber = 4;
  private global::Skeleton.Types.TrackingConfidence handLeftConfidence_ = 0;
  public global::Skeleton.Types.TrackingConfidence HandLeftConfidence {
    get { return handLeftConfidence_; }
    set {
      handLeftConfidence_ = value;
    }
  }

  /// <summary>Field number for the "hand_right_state" field.</summary>
  public const int HandRightStateFieldNumber = 5;
  private global::Skeleton.Types.HandState handRightState_ = 0;
  public global::Skeleton.Types.HandState HandRightState {
    get { return handRightState_; }
    set {
      handRightState_ = value;
    }
  }

  /// <summary>Field number for the "hand_right_confidence" field.</summary>
  public const int HandRightConfidenceFieldNumber = 6;
  private global::Skeleton.Types.TrackingConfidence handRightConfidence_ = 0;
  public global::Skeleton.Types.TrackingConfidence HandRightConfidence {
    get { return handRightConfidence_; }
    set {
      handRightConfidence_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Skeleton);
  }

  public bool Equals(Skeleton other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!joints_.Equals(other.joints_)) return false;
    if (HandLeftState != other.HandLeftState) return false;
    if (HandLeftConfidence != other.HandLeftConfidence) return false;
    if (HandRightState != other.HandRightState) return false;
    if (HandRightConfidence != other.HandRightConfidence) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0UL) hash ^= Id.GetHashCode();
    hash ^= joints_.GetHashCode();
    if (HandLeftState != 0) hash ^= HandLeftState.GetHashCode();
    if (HandLeftConfidence != 0) hash ^= HandLeftConfidence.GetHashCode();
    if (HandRightState != 0) hash ^= HandRightState.GetHashCode();
    if (HandRightConfidence != 0) hash ^= HandRightConfidence.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(Id);
    }
    joints_.WriteTo(output, _repeated_joints_codec);
    if (HandLeftState != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) HandLeftState);
    }
    if (HandLeftConfidence != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) HandLeftConfidence);
    }
    if (HandRightState != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) HandRightState);
    }
    if (HandRightConfidence != 0) {
      output.WriteRawTag(48);
      output.WriteEnum((int) HandRightConfidence);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Id != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
    }
    size += joints_.CalculateSize(_repeated_joints_codec);
    if (HandLeftState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HandLeftState);
    }
    if (HandLeftConfidence != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HandLeftConfidence);
    }
    if (HandRightState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HandRightState);
    }
    if (HandRightConfidence != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HandRightConfidence);
    }
    return size;
  }

  public void MergeFrom(Skeleton other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0UL) {
      Id = other.Id;
    }
    joints_.Add(other.joints_);
    if (other.HandLeftState != 0) {
      HandLeftState = other.HandLeftState;
    }
    if (other.HandLeftConfidence != 0) {
      HandLeftConfidence = other.HandLeftConfidence;
    }
    if (other.HandRightState != 0) {
      HandRightState = other.HandRightState;
    }
    if (other.HandRightConfidence != 0) {
      HandRightConfidence = other.HandRightConfidence;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadUInt64();
          break;
        }
        case 18: {
          joints_.AddEntriesFrom(input, _repeated_joints_codec);
          break;
        }
        case 24: {
          handLeftState_ = (global::Skeleton.Types.HandState) input.ReadEnum();
          break;
        }
        case 32: {
          handLeftConfidence_ = (global::Skeleton.Types.TrackingConfidence) input.ReadEnum();
          break;
        }
        case 40: {
          handRightState_ = (global::Skeleton.Types.HandState) input.ReadEnum();
          break;
        }
        case 48: {
          handRightConfidence_ = (global::Skeleton.Types.TrackingConfidence) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Skeleton message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    /// <summary>
    ///  Values match Kinect.HandState
    /// </summary>
    public enum HandState {
      [pbr::OriginalName("UNKNOWN")] Unknown = 0,
      [pbr::OriginalName("NOT_TRACKED")] NotTracked = 1,
      [pbr::OriginalName("OPEN")] Open = 2,
      [pbr::OriginalName("CLOSED")] Closed = 3,
      [pbr::OriginalName("LASSO")] Lasso = 4,
    }

    /// <summary>
    ///  Values match Kinect.TrackingConfidence
    /// </summary>
    public enum TrackingConfidence {
      [pbr::OriginalName("LOW")] Low = 0,
      [pbr::OriginalName("HIGH")] High = 1,
    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Joint : pb::IMessage<Joint> {
  private static readonly pb::MessageParser<Joint> _parser = new pb::MessageParser<Joint>(() => new Joint());
  public static pb::MessageParser<Joint> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::SkeletonReflection.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Joint() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Joint(Joint other) : this() {
    type_ = other.type_;
    Orientation = other.orientation_ != null ? other.Orientation.Clone() : null;
    Position = other.position_ != null ? other.Position.Clone() : null;
    trackingState_ = other.trackingState_;
  }

  public Joint Clone() {
    return new Joint(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Joint.Types.JointType type_ = 0;
  public global::Joint.Types.JointType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "orientation" field.</summary>
  public const int OrientationFieldNumber = 2;
  private global::Orientation orientation_;
  public global::Orientation Orientation {
    get { return orientation_; }
    set {
      orientation_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::Position position_;
  public global::Position Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "tracking_state" field.</summary>
  public const int TrackingStateFieldNumber = 4;
  private global::Joint.Types.TrackingState trackingState_ = 0;
  public global::Joint.Types.TrackingState TrackingState {
    get { return trackingState_; }
    set {
      trackingState_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Joint);
  }

  public bool Equals(Joint other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(Orientation, other.Orientation)) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (TrackingState != other.TrackingState) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (orientation_ != null) hash ^= Orientation.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (TrackingState != 0) hash ^= TrackingState.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (orientation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Orientation);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (TrackingState != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) TrackingState);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (orientation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (TrackingState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrackingState);
    }
    return size;
  }

  public void MergeFrom(Joint other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.orientation_ != null) {
      if (orientation_ == null) {
        orientation_ = new global::Orientation();
      }
      Orientation.MergeFrom(other.Orientation);
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::Position();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.TrackingState != 0) {
      TrackingState = other.TrackingState;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Joint.Types.JointType) input.ReadEnum();
          break;
        }
        case 18: {
          if (orientation_ == null) {
            orientation_ = new global::Orientation();
          }
          input.ReadMessage(orientation_);
          break;
        }
        case 26: {
          if (position_ == null) {
            position_ = new global::Position();
          }
          input.ReadMessage(position_);
          break;
        }
        case 32: {
          trackingState_ = (global::Joint.Types.TrackingState) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Joint message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    /// <summary>
    ///  Values match Kinect.Joint.JointType
    /// </summary>
    public enum JointType {
      [pbr::OriginalName("SPINE_BASE")] SpineBase = 0,
      [pbr::OriginalName("SPINE_MID")] SpineMid = 1,
      [pbr::OriginalName("NECK_")] Neck = 2,
      [pbr::OriginalName("HEAD_")] Head = 3,
      [pbr::OriginalName("SHOULDER_LEFT")] ShoulderLeft = 4,
      [pbr::OriginalName("ELBOW_LEFT")] ElbowLeft = 5,
      [pbr::OriginalName("WRIST_LEFT")] WristLeft = 6,
      [pbr::OriginalName("HAND_LEFT")] HandLeft = 7,
      [pbr::OriginalName("SHOULDER_RIGHT")] ShoulderRight = 8,
      [pbr::OriginalName("ELBOW_RIGHT")] ElbowRight = 9,
      [pbr::OriginalName("WRIST_RIGHT")] WristRight = 10,
      [pbr::OriginalName("HAND_RIGHT")] HandRight = 11,
      [pbr::OriginalName("HIP_LEFT")] HipLeft = 12,
      [pbr::OriginalName("KNEE_LEFT")] KneeLeft = 13,
      [pbr::OriginalName("ANKLE_LEFT")] AnkleLeft = 14,
      [pbr::OriginalName("FOOT_LEFT")] FootLeft = 15,
      [pbr::OriginalName("HIP_RIGHT")] HipRight = 16,
      [pbr::OriginalName("KNEE_RIGHT")] KneeRight = 17,
      [pbr::OriginalName("ANKLE_RIGHT")] AnkleRight = 18,
      [pbr::OriginalName("FOOT_RIGHT")] FootRight = 19,
      [pbr::OriginalName("SPINE_SHOULDER")] SpineShoulder = 20,
      [pbr::OriginalName("HAND_TIP_LEFT")] HandTipLeft = 21,
      [pbr::OriginalName("THUMB_LEFT")] ThumbLeft = 22,
      [pbr::OriginalName("HAND_TIP_RIGHT")] HandTipRight = 23,
      [pbr::OriginalName("THUMB_RIGHT")] ThumbRight = 24,
    }

    /// <summary>
    ///  Values match Kinect.Joint.TrackingState
    /// </summary>
    public enum TrackingState {
      [pbr::OriginalName("NOT_TRACKED")] NotTracked = 0,
      [pbr::OriginalName("INFERRED")] Inferred = 1,
      [pbr::OriginalName("TRACKED")] Tracked = 2,
    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Orientation : pb::IMessage<Orientation> {
  private static readonly pb::MessageParser<Orientation> _parser = new pb::MessageParser<Orientation>(() => new Orientation());
  public static pb::MessageParser<Orientation> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::SkeletonReflection.Descriptor.MessageTypes[3]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Orientation() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Orientation(Orientation other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    w_ = other.w_;
  }

  public Orientation Clone() {
    return new Orientation(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 4;
  private float w_;
  public float W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Orientation);
  }

  public bool Equals(Orientation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    if (W != other.W) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    if (Z != 0F) hash ^= Z.GetHashCode();
    if (W != 0F) hash ^= W.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (W != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(W);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (W != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  public void MergeFrom(Orientation other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.W != 0F) {
      W = other.W;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
        case 37: {
          W = input.ReadFloat();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Position : pb::IMessage<Position> {
  private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
  public static pb::MessageParser<Position> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::SkeletonReflection.Descriptor.MessageTypes[4]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Position() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Position(Position other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
  }

  public Position Clone() {
    return new Position(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Position);
  }

  public bool Equals(Position other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    if (Z != 0F) hash ^= Z.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  public void MergeFrom(Position other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
