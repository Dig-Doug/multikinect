// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Roeper.Bu.Kinect.Camera {
  public static class Camera
  {
    static readonly string __ServiceName = "roeper.bu.kinect.camera.Camera";

    static readonly Marshaller<global::Roeper.Bu.Kinect.Camera.RecordOptions> __Marshaller_RecordOptions = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Roeper.Bu.Kinect.Camera.RecordOptions.Parser.ParseFrom);
    static readonly Marshaller<global::Roeper.Bu.Kinect.Frame> __Marshaller_Frame = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Roeper.Bu.Kinect.Frame.Parser.ParseFrom);

    static readonly Method<global::Roeper.Bu.Kinect.Camera.RecordOptions, global::Roeper.Bu.Kinect.Frame> __Method_record = new Method<global::Roeper.Bu.Kinect.Camera.RecordOptions, global::Roeper.Bu.Kinect.Frame>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "record",
        __Marshaller_RecordOptions,
        __Marshaller_Frame);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Roeper.Bu.Kinect.Camera.CameraReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Camera</summary>
    public abstract class CameraBase
    {
      public virtual global::System.Threading.Tasks.Task record(IAsyncStreamReader<global::Roeper.Bu.Kinect.Camera.RecordOptions> requestStream, IServerStreamWriter<global::Roeper.Bu.Kinect.Frame> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Camera</summary>
    public class CameraClient : ClientBase<CameraClient>
    {
      /// <summary>Creates a new client for Camera</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CameraClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Camera that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CameraClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CameraClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CameraClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual AsyncDuplexStreamingCall<global::Roeper.Bu.Kinect.Camera.RecordOptions, global::Roeper.Bu.Kinect.Frame> record(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return record(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::Roeper.Bu.Kinect.Camera.RecordOptions, global::Roeper.Bu.Kinect.Frame> record(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_record, null, options);
      }
      protected override CameraClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CameraClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CameraBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_record, serviceImpl.record).Build();
    }

  }
}
#endregion
