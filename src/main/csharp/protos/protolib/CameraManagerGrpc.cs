// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_manager.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Roeper.Bu.Kinect.Master.Camera {
  public static class CameraManager
  {
    static readonly string __ServiceName = "roeper.bu.kinect.master.camera.CameraManager";

    static readonly Marshaller<global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest> __Marshaller_RegistrationRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse> __Marshaller_RegistrationResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse.Parser.ParseFrom);

    static readonly Method<global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest, global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse> __Method_registerCamera = new Method<global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest, global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse>(
        MethodType.Unary,
        __ServiceName,
        "registerCamera",
        __Marshaller_RegistrationRequest,
        __Marshaller_RegistrationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Roeper.Bu.Kinect.Master.Camera.CameraManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CameraManager</summary>
    public abstract class CameraManagerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse> registerCamera(global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CameraManager</summary>
    public class CameraManagerClient : ClientBase<CameraManagerClient>
    {
      /// <summary>Creates a new client for CameraManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CameraManagerClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CameraManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CameraManagerClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CameraManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CameraManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse registerCamera(global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return registerCamera(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse registerCamera(global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_registerCamera, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse> registerCameraAsync(global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return registerCameraAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Roeper.Bu.Kinect.Master.Camera.RegistrationResponse> registerCameraAsync(global::Roeper.Bu.Kinect.Master.Camera.RegistrationRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_registerCamera, null, options, request);
      }
      protected override CameraManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CameraManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(CameraManagerBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_registerCamera, serviceImpl.registerCamera).Build();
    }

  }
}
#endregion
